using namespace Et::Math;
using namespace Et::Test;

unsigned int TEST_MAT4() {
    Unit unit("Mat4");
    
    unit.add("Constructors", []() {
        // Mat4<T>(bool identity = false)
        Mat4<float> m;
        eq({{m[0].x, 0.0f}, {m[0].y, 0.0f}, {m[0].z, 0.0f}, {m[0].w, 0.0f},
            {m[1].x, 0.0f}, {m[1].y, 0.0f}, {m[1].z, 0.0f}, {m[1].w, 0.0f},
            {m[2].x, 0.0f}, {m[2].y, 0.0f}, {m[2].z, 0.0f}, {m[2].w, 0.0f},
            {m[3].x, 0.0f}, {m[3].y, 0.0f}, {m[3].z, 0.0f}, {m[3].w, 0.0f}},
            "Mat4()");
        
        Mat4<float> i(true);
        eq({{i[0].x, 1.0f}, {i[0].y, 0.0f}, {i[0].z, 0.0f}, {i[0].w, 0.0f},
            {i[1].x, 0.0f}, {i[1].y, 1.0f}, {i[1].z, 0.0f}, {i[1].w, 0.0f},
            {i[2].x, 0.0f}, {i[2].y, 0.0f}, {i[2].z, 1.0f}, {i[2].w, 0.0f},
            {i[3].x, 0.0f}, {i[3].y, 0.0f}, {i[3].z, 0.0f}, {i[3].w, 1.0f}},
            "Mat4(true)");
    
        // Mat4<T>(const std::initializer_list<T> init)
        Mat4<float> m1 {1.0f,  2.0f,  3.0f,  4.0f,
                        5.0f,  6.0f,  7.0f,  8.0f,
                        9.0f,  10.0f, 11.0f, 12.0f,
                        13.0f, 14.0f, 15.0f, 16.0f};
        eq({{m1[0].x, 1.0f},  {m1[0].y, 2.0f},  {m1[0].z, 3.0f},  {m1[0].w, 4.0f},
            {m1[1].x, 5.0f},  {m1[1].y, 6.0f},  {m1[1].z, 7.0f},  {m1[1].w, 8.0f},
            {m1[2].x, 9.0f},  {m1[2].y, 10.0f}, {m1[2].z, 11.0f}, {m1[2].w, 12.0f},
            {m1[3].x, 13.0f}, {m1[3].y, 14.0f}, {m1[3].z, 15.0f}, {m1[3].w, 16.0f}},
            "Mat4(const std::initializer_list<T> init)");
        
        // Mat4(const Vec4<T> a, const Vec4<T> b, const Vec4<T> c, const Vec4<T> d)
        Mat4<float> m2(Vec4<float>(1.0f,  2.0f,  3.0f,  4.0f),
                       Vec4<float>(5.0f,  6.0f,  7.0f,  8.0f),
                       Vec4<float>(9.0f,  10.0f, 11.0f, 12.0f),
                       Vec4<float>(13.0f, 14.0f, 15.0f, 16.0f));
        eq({{m1[0].x, 1.0f},  {m1[0].y, 2.0f},  {m1[0].z, 3.0f},  {m1[0].w, 4.0f},
            {m1[1].x, 5.0f},  {m1[1].y, 6.0f},  {m1[1].z, 7.0f},  {m1[1].w, 8.0f},
            {m1[2].x, 9.0f},  {m1[2].y, 10.0f}, {m1[2].z, 11.0f}, {m1[2].w, 12.0f},
            {m1[3].x, 13.0f}, {m1[3].y, 14.0f}, {m1[3].z, 15.0f}, {m1[3].w, 16.0f}},
            "Mat4(const Vec4<T> a, const Vec4<T> b, const Vec4<T> c, const Vec4<T> d)");
        
        // Mat4(const Mat4<T>& m)
        Mat4<float> m3(m2);
        eq({{m3[0].x, 1.0f},  {m3[0].y, 2.0f},  {m3[0].z, 3.0f},  {m3[0].w, 4.0f},
            {m3[1].x, 5.0f},  {m3[1].y, 6.0f},  {m3[1].z, 7.0f},  {m3[1].w, 8.0f},
            {m3[2].x, 9.0f},  {m3[2].y, 10.0f}, {m3[2].z, 11.0f}, {m3[2].w, 12.0f},
            {m3[3].x, 13.0f}, {m3[3].y, 14.0f}, {m3[3].z, 15.0f}, {m3[3].w, 16.0f}},
            "Mat4(const Mat4<T>& m)");
    });
    
    unit.add("operator[]", []() {
        // const
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        eq({{m[0].x, 1.0f}, {m[2].w, 12.0f}}, "const");
        
        // non-const
        m[1].x = 123.0f;
        eq(m[1].x, 123.0f, "non-const");
    });
    
    unit.add("operator=", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 = m;
        eq({{m2[0].x, 1.0f},  {m2[0].y, 2.0f},  {m2[0].z, 3.0f},  {m2[0].w, 4.0f},
            {m2[1].x, 5.0f},  {m2[1].y, 6.0f},  {m2[1].z, 7.0f},  {m2[1].w, 8.0f},
            {m2[2].x, 9.0f},  {m2[2].y, 10.0f}, {m2[2].z, 11.0f}, {m2[2].w, 12.0f},
            {m2[3].x, 13.0f}, {m2[3].y, 14.0f}, {m2[3].z, 15.0f}, {m2[3].w, 16.0f}});
    });
    
    unit.add("operator+=", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2(m);
        m += m2;
        eq({{m[0].x, 2.0f},  {m[0].y, 4.0f},  {m[0].z, 6.0f},  {m[0].w, 8.0f},
            {m[1].x, 10.0f}, {m[1].y, 12.0f}, {m[1].z, 14.0f}, {m[1].w, 16.0f},
            {m[2].x, 18.0f}, {m[2].y, 20.0f}, {m[2].z, 22.0f}, {m[2].w, 24.0f},
            {m[3].x, 26.0f}, {m[3].y, 28.0f}, {m[3].z, 30.0f}, {m[3].w, 32.0f}});
    });
    
    unit.add("operator-=", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 {1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f};
        m -= m2;
        eq({{m[0].x, 0.0f},  {m[0].y, 1.0f},  {m[0].z, 2.0f},  {m[0].w, 3.0f},
            {m[1].x, 4.0f},  {m[1].y, 5.0f},  {m[1].z, 6.0f},  {m[1].w, 7.0f},
            {m[2].x, 8.0f},  {m[2].y, 9.0f},  {m[2].z, 10.0f}, {m[2].w, 11.0f},
            {m[3].x, 12.0f}, {m[3].y, 13.0f}, {m[3].z, 14.0f}, {m[3].w, 15.0f}});
    });
    
    unit.add("operator*=", []() {
        // Scalar
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        m *= 2.0f;
        eq({{m[0].x, 2.0f},  {m[0].y, 4.0f},  {m[0].z, 6.0f},  {m[0].w, 8.0f},
            {m[1].x, 10.0f}, {m[1].y, 12.0f}, {m[1].z, 14.0f}, {m[1].w, 16.0f},
            {m[2].x, 18.0f}, {m[2].y, 20.0f}, {m[2].z, 22.0f}, {m[2].w, 24.0f},
            {m[3].x, 26.0f}, {m[3].y, 28.0f}, {m[3].z, 30.0f}, {m[3].w, 32.0f}}, "Scalar");
        
        // Matrix
        Mat4<float> m2 {1.0f,  2.0f,  3.0f,  4.0f,
                        5.0f,  6.0f,  7.0f,  8.0f,
                        9.0f,  10.0f, 11.0f, 12.0f,
                        13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m3(m2);
        m2 *= m3;
        eq({{m2[0].x, 90.0f},  {m2[0].y, 100.0f}, {m2[0].z, 110.0f}, {m2[0].w, 120.0f},
            {m2[1].x, 202.0f}, {m2[1].y, 228.0f}, {m2[1].z, 254.0f}, {m2[1].w, 280.0f},
            {m2[2].x, 314.0f}, {m2[2].y, 356.0f}, {m2[2].z, 398.0f}, {m2[2].w, 440.0f},
            {m2[3].x, 426.0f}, {m2[3].y, 484.0f}, {m2[3].z, 542.0f}, {m2[3].w, 600.0f}},
            "Matrix");
    });
    
    unit.add("operator+", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 {1.0f,  2.0f,  3.0f,  4.0f,
                        5.0f,  6.0f,  7.0f,  8.0f,
                        9.0f,  10.0f, 11.0f, 12.0f,
                        13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m3 = m + m2;
        eq({{m3[0].x, 2.0f},  {m3[0].y, 4.0f},  {m3[0].z, 6.0f},  {m3[0].w, 8.0f},
            {m3[1].x, 10.0f}, {m3[1].y, 12.0f}, {m3[1].z, 14.0f}, {m3[1].w, 16.0f},
            {m3[2].x, 18.0f}, {m3[2].y, 20.0f}, {m3[2].z, 22.0f}, {m3[2].w, 24.0f},
            {m3[3].x, 26.0f}, {m3[3].y, 28.0f}, {m3[3].z, 30.0f}, {m3[3].w, 32.0f}});
    });
    
    unit.add("operator-", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 {1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f};
        Mat4<float> m3 = m - m2;
        eq({{m3[0].x, 0.0f},  {m3[0].y, 1.0f},  {m3[0].z, 2.0f},  {m3[0].w, 3.0f},
            {m3[1].x, 4.0f},  {m3[1].y, 5.0f},  {m3[1].z, 6.0f},  {m3[1].w, 7.0f},
            {m3[2].x, 8.0f},  {m3[2].y, 9.0f},  {m3[2].z, 10.0f}, {m3[2].w, 11.0f},
            {m3[3].x, 12.0f}, {m3[3].y, 13.0f}, {m3[3].z, 14.0f}, {m3[3].w, 15.0f}});
    });
    
    unit.add("operator*", []() {
        // Scalar
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        
        m = m * 2.0f;
        eq({{m[0].x, 2.0f},  {m[0].y, 4.0f},  {m[0].z, 6.0f},  {m[0].w, 8.0f},
            {m[1].x, 10.0f}, {m[1].y, 12.0f}, {m[1].z, 14.0f}, {m[1].w, 16.0f},
            {m[2].x, 18.0f}, {m[2].y, 20.0f}, {m[2].z, 22.0f}, {m[2].w, 24.0f},
            {m[3].x, 26.0f}, {m[3].y, 28.0f}, {m[3].z, 30.0f}, {m[3].w, 32.0f}});
        
        // Vector
        Vec4<float> v {2.0f, 3.0f, 4.0f, 5.0f};
        Vec4<float> v2 = m * v;
        eq({{v2.x, 236.0f}, {v2.y, 264.0f}, {v2.z, 292.0f}, {v2.w, 320.0f}}, "Vector");
        
        // Matrix
        Mat4<float> m2 {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m3 = m * m2;
        eq({{m3[0].x, 180.0f}, {m3[0].y, 200.0f}, {m3[0].z, 220.0f},  {m3[0].w, 240.0f},
            {m3[1].x, 404.0f}, {m3[1].y, 456.0f}, {m3[1].z, 508.0f},  {m3[1].w, 560.0f},
            {m3[2].x, 628.0f}, {m3[2].y, 712.0f}, {m3[2].z, 796.0f},  {m3[2].w, 880.0f},
            {m3[3].x, 852.0f}, {m3[3].y, 968.0f}, {m3[3].z, 1084.0f}, {m3[3].w, 1200.0f}},
            "Matrix");
    });
    
    unit.add("operator==", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 {1.0f,  2.0f,  3.0f,  4.0f,
                        5.0f,  6.0f,  7.0f,  8.0f,
                        9.0f,  10.0f, 11.0f, 12.0f,
                        13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m3 {1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f,
                        1.0f, 1.0f, 1.0f, 1.0f};
        eq((m == m2), true);
        eq((m == m3), false);
    });
    
    unit.add("operator!=", []() {
        Mat3<float> m {1.0f, 2.0f, 3.0f,
                       4.0f, 5.0f, 6.0f,
                       7.0f, 8.0f, 9.0f};
        Mat3<float> m2 {1.0f, 2.0f, 3.0f,
                        4.0f, 5.0f, 6.0f,
                        7.0f, 8.0f, 9.0f};
        Mat3<float> m3 {100.0f, 2.0f, 3.0f,
                        4.0f, 5.0f, 6.0f,
                        7.0f, 8.0f, 9.0f};
        eq((m != m2), false);
        eq((m != m3), true);
    });
    
    unit.add("setIdentity", []() {
        Mat4<float> m;
        m.setIdentity();
        eq({{m[0].x, 1.0f}, {m[0].y, 0.0f}, {m[0].z, 0.0f}, {m[0].w, 0.0f},
            {m[1].x, 0.0f}, {m[1].y, 1.0f}, {m[1].z, 0.0f}, {m[1].w, 0.0f},
            {m[2].x, 0.0f}, {m[2].y, 0.0f}, {m[2].z, 1.0f}, {m[2].w, 0.0f},
            {m[3].x, 0.0f}, {m[3].y, 0.0f}, {m[3].z, 0.0f}, {m[3].w, 1.0f}});
    });
    
    // TODO
    unit.add("rotate", []() {});
    
    // TODO
    unit.add("translate", []() {});
    
    unit.add("getTranspose", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        Mat4<float> m2 = m.getTranspose();
        eq({{m2[0].x, 1.0f}, {m2[0].y, 5.0f}, {m2[0].z, 9.0f},  {m2[0].w, 13.0f},
            {m2[1].x, 2.0f}, {m2[1].y, 6.0f}, {m2[1].z, 10.0f}, {m2[1].w, 14.0f},
            {m2[2].x, 3.0f}, {m2[2].y, 7.0f}, {m2[2].z, 11.0f}, {m2[2].w, 15.0f},
            {m2[3].x, 4.0f}, {m2[3].y, 8.0f}, {m2[3].z, 12.0f}, {m2[3].w, 16.0f}});
    });

    unit.add("setZero", []() {
        Mat4<float> m {1.0f,  2.0f,  3.0f,  4.0f,
                       5.0f,  6.0f,  7.0f,  8.0f,
                       9.0f,  10.0f, 11.0f, 12.0f,
                       13.0f, 14.0f, 15.0f, 16.0f};
        m.setZero();
        eq({{m[0].x, 0.0f}, {m[0].y, 0.0f}, {m[0].z, 0.0f}, {m[0].w, 0.0f},
            {m[1].x, 0.0f}, {m[1].y, 0.0f}, {m[1].z, 0.0f}, {m[1].w, 0.0f},
            {m[2].x, 0.0f}, {m[2].y, 0.0f}, {m[2].z, 0.0f}, {m[2].w, 0.0f},
            {m[3].x, 0.0f}, {m[3].y, 0.0f}, {m[3].z, 0.0f}, {m[3].w, 0.0f}});
    });
    
    return unit.run();
}
